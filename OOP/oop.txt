1.OOP基本概念
    1.1 过程和函数
        - 过程只能执行，但没有返回值
        - 函数不仅能执行，还有返回值

2.OOP语法
    2.1 dir内置函数
       - 在python中，变量，数据，函数都是对象
       - 使用内置函数dir传入标识符/数据，可以查看对象内的所有属性及方法
       - oop1.py
    2.2 定义简单的类
       - 面向对象是更大的封装
       - oop2.py
    2.3 引用概念的强调
       - 类创建了对象后，tom变量仍然记录的是对象在内存中的地址
       - print() 输出对象变量时，能够输出这个变量引用的对象是由哪一个类创建的对象，以及在内存中的地址（0x）
    2.4 设置对象属性
       - 可以在类的外部直接用.去设置，但不推荐

3.方法中的self参数
    3.1 代表当前的对象

4.初始化
    4.1 当使用类名()创建对象时
        - 为对象在内存中分配空间
        - 为对象的属性设置初始值（初始化方法init）
    4.2 __init__ 是对象的内置方法
        - 专门用来定义一个类具体有哪些属性的方法
        - 每次创建一个对象都会调用这个方法
        - 如果希望初始化的时候设置初始值，那么就定义成__init__方法的参数

5.内置方法和属性
    5.1 __del__方法
        - 当创建对象的时候，为对象分配空间，分配完之后，会自动调用__init__方法
        - 当一个对象被从内存中销毁前，会自动调用__del__方法
        （如果希望对象在被销毁之前，再做一些事情，可以考虑__del__方法）
        - del 关键字可以删除一个对象
   5.2 __str__方法
        - 使用print输出对象变量时，默认会输出:(变量引用的对象+内存中的地址 16进制)
        - 若希望在print输出对象变量时，能够打印自定义的内容，可利用__str__
        - __str__方法必须返回一个字符串

6.私有属性和方法
    6.1 应用场景和定义方式
        - 对象的某些属性或者方法，可能只希望在对象的内部被使用，而不希望在外部被访问
        - 在定义属性或者方法时，在属性名或者方法前增加两个下划线 定义的就是私有属性和方法
        - oop6.py
    6.2 伪私有属性和私有方法
        - 在python中，并没有真正意义的私有
        - 在给属性和方法命名时，实际是对名称做了一些特殊处理
        - 如果想要调用，加上 _类名 就可以了





